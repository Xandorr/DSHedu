<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %> | DSH에듀</title>
  <meta name="description" content="<%= description %>">
  
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  
  <!-- AOS Animation Library -->
  <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
  
  <!-- Swiper CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.css" />
  
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  
  <!-- Custom CSS -->
  <link rel="stylesheet" href="/css/style.css">
  
  <!-- 다른 페이지 헤더 스타일 -->
  <style>
    header .navbar {
      background-color: white !important;
      box-shadow: 0 .125rem .25rem rgba(0,0,0,.075) !important;
      z-index: 1030;
    }
    
    .program-card {
      transition: all 0.3s ease;
      min-height: 500px !important;
    }
    
    .program-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 15px 30px rgba(0,0,0,0.1) !important;
    }
    
    .program-card .card-img-top {
      transition: all 0.5s ease;
      height: 200px;
      object-fit: cover;
    }
    
    .program-card:hover .card-img-top {
      transform: scale(1.1);
    }
    
    .program-card .card-body {
      height: 300px !important;
      display: flex !important;
      flex-direction: column !important;
    }
    
    .program-card .card-title {
      height: 60px !important;
      overflow: hidden !important;
      display: -webkit-box !important;
      -webkit-line-clamp: 2 !important;
      -webkit-box-orient: vertical !important;
      line-height: 1.4 !important;
      text-overflow: ellipsis !important;
    }
    
    .program-card .card-text {
      height: 80px !important;
      overflow: hidden !important;
      display: -webkit-box !important;
      -webkit-line-clamp: 3 !important;
      -webkit-box-orient: vertical !important;
      flex-grow: 1 !important;
      line-height: 1.4 !important;
      text-overflow: ellipsis !important;
    }
    
    .program-card .program-details {
      height: 100px !important;
    }
    
    .program-card .program-details span {
      white-space: nowrap !important;
      overflow: hidden !important;
      text-overflow: ellipsis !important;
    }
    
    /* 말줄임표는 JavaScript로 동적 처리 */
    .program-card .card-title[data-overflow="true"]::after,
    .program-card .card-text[data-overflow="true"]::after {
      content: '...' !important;
      position: absolute !important;
      right: 0 !important;
      bottom: 0 !important;
      background: linear-gradient(to right, transparent, white 50%) !important;
      padding-left: 20px !important;
      font-weight: bold !important;
      color: #6c757d !important;
      pointer-events: none !important;
    }
    
    .program-details {
      font-size: 0.9rem;
    }
    
    @media (max-width: 767.98px) {
      .program-card .card-img-top {
        height: 180px;
      }
    }
  </style>
</head>
<body>
  <!-- Header -->
  <%- include('./partials/header') %>
  
  <!-- Main Content -->
  <main>
    <!-- Programs Hero Section -->
    <section class="program-hero py-5 bg-light">
      <div class="container">
        <div class="row align-items-center">
          <div class="col-lg-6">
            <h1 class="display-4 fw-bold mb-4">OUR <span class="text-primary">PROGRAMS</span></h1>
            <p class="lead mb-4">미국 최고 기관에서 제공하는 다양한 교육 캠프 프로그램을 살펴보세요. 여름 캠프부터 겨울 프로그램, 특별 학술 프로그램까지 모든 학생들에게 맞는 프로그램이 있습니다.</p>
            <div class="mb-4">
              <div class="filters-buttons mb-4">
                <button class="btn btn-primary me-2 mb-2 active" data-filter="all">모든 프로그램</button>
                <button class="btn btn-outline-primary me-2 mb-2" data-filter="summer">여름 캠프</button>
                <button class="btn btn-outline-primary me-2 mb-2" data-filter="winter">겨울 캠프</button>
                <button class="btn btn-outline-primary mb-2" data-filter="special">특별 프로그램</button>
              </div>
            </div>
          </div>
          <div class="col-lg-6 d-none d-lg-block">
            <img src="https://res.cloudinary.com/dnry0kzyv/image/upload/v1744951848/ChatGPT_Image_Apr_18_2025_12_48_19_AM_nsgnij.png" alt="LOVE TO LEARN" class="img-fluid rounded-4 shadow">
          </div>
        </div>
      </div>
    </section>

    <!-- Programs Section -->
    <section class="programs-section py-5">
      <div class="container py-5">
        <div class="row justify-content-center mb-5">
          <div class="col-lg-8 text-center">
            <span class="badge bg-primary-subtle text-primary px-3 py-2 fs-6 rounded-pill mb-3">OUR PROGRAMS</span>
            <h2 class="display-5 fw-bold mb-4">교육 <span class="text-primary">프로그램</span></h2>
            <p class="lead text-secondary">DSH에듀에서 제공하는 다양한 교육 프로그램을 살펴보세요</p>
          </div>
        </div>

        <div class="row g-4" id="programs-container">
          <% programs.forEach((program, index) => { %>
          <div class="col-lg-4 col-md-6 mb-4 program-item" data-category="<%= program.category %>" data-aos="fade-up" data-aos-delay="<%= (index + 1) * 100 %>">
            <%- include('./partials/program-card', { program: program }) %>
          </div>
          <% }) %>
        </div>
      </div>
    </section>

    <!-- Call to Action Section -->
    <section class="cta-section py-5 bg-light">
      <div class="container">
        <div class="text-center">
          <h2 class="fw-bold display-5 mb-3">FIND YOUR <span class="text-primary">PERFECT PROGRAM</span></h2>
          <p class="lead text-muted mb-4">DSH에듀의 전문 상담사가 학생에게 가장 적합한 프로그램을 찾을 수 있도록 도와드립니다.</p>
          <a href="/contact" class="btn btn-primary btn-lg px-5">문의하기</a>
        </div>
      </div>
    </section>
  </main>
  
  <!-- Footer -->
  <%- include('./partials/footer') %>
  
  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <!-- AOS Animation Library -->
  <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
  
  <!-- GSAP Animation Library -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.3/gsap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.3/ScrollTrigger.min.js"></script>
  
  <!-- Swiper JS -->
  <script src="https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.js"></script>
  
  <!-- Translations JS -->
  <script src="/js/translations.js"></script>
  
  <!-- Custom JS -->
  <script src="/js/main.js"></script>
  
  <!-- Programs Filter Script -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const filterButtons = document.querySelectorAll('.filters-buttons button');
      const programItems = document.querySelectorAll('.program-item');
      
      console.log('Found', filterButtons.length, 'filter buttons');
      console.log('Found', programItems.length, 'program items');
      
      // URL 파라미터에서 카테고리 읽기
      const urlParams = new URLSearchParams(window.location.search);
      const categoryParam = urlParams.get('category');
      console.log('URL category parameter:', categoryParam);
      
      // 카테고리 매핑
      const categoryMap = {
        'summer': 'summer',
        'winter': 'winter', 
        'special': 'special'
      };
      
      let initialFilter = 'all';
      if (categoryParam && categoryMap[categoryParam]) {
        initialFilter = categoryMap[categoryParam];
      }
      
      console.log('Initial filter:', initialFilter);
      
      // 초기 필터 적용 함수
      function applyFilter(filter) {
        console.log('Applying filter:', filter);
        
        // 모든 버튼 스타일 초기화
        filterButtons.forEach(btn => {
          btn.classList.remove('active', 'btn-primary');
          btn.classList.add('btn-outline-primary');
        });
        
        // 해당 필터 버튼 활성화
        const activeButton = document.querySelector(`[data-filter="${filter}"]`);
        if (activeButton) {
          activeButton.classList.remove('btn-outline-primary');
          activeButton.classList.add('btn-primary', 'active');
        }
        
        let visibleCount = 0;
        
        programItems.forEach(item => {
          const category = item.getAttribute('data-category');
          
          if (filter === 'all' || category === filter) {
            item.style.display = 'block';
            item.classList.add('aos-animate');
            visibleCount++;
            console.log('Showing item with category:', category);
          } else {
            item.style.display = 'none';
            item.classList.remove('aos-animate');
            console.log('Hiding item with category:', category);
          }
        });
        
        console.log('Visible items after filter:', visibleCount);
        
        // AOS 새로고침
        if (typeof AOS !== 'undefined') {
          setTimeout(() => {
            AOS.refresh();
          }, 100);
        }
      }
      
      // 초기 필터 적용
      applyFilter(initialFilter);
      
      // 필터 버튼 클릭 이벤트
      filterButtons.forEach(button => {
        button.addEventListener('click', function() {
          const filter = this.getAttribute('data-filter');
          applyFilter(filter);
          
          // URL 업데이트 (선택사항)
          if (filter === 'all') {
            window.history.replaceState({}, '', '/programs');
          } else {
            window.history.replaceState({}, '', `/programs?category=${filter}`);
          }
        });
      });
    });
  </script>
  
  <!-- Initialize AOS -->
  <script>
    AOS.init({
      duration: 800,
      easing: 'ease-in-out',
      once: true
    });

    // 프로그램 카드 말줄임표 동적 처리
    function checkTextOverflow() {
      const programCards = document.querySelectorAll('.program-card');
      
      programCards.forEach(card => {
        const title = card.querySelector('.card-title');
        const description = card.querySelector('.card-text');
        
        // 제목 말줄임표 확인
        if (title) {
          const isTitleOverflowing = title.scrollHeight > title.clientHeight;
          if (isTitleOverflowing) {
            title.style.position = 'relative';
            title.setAttribute('data-overflow', 'true');
          } else {
            title.removeAttribute('data-overflow');
          }
        }
        
        // 설명 말줄임표 확인
        if (description) {
          const isDescriptionOverflowing = description.scrollHeight > description.clientHeight;
          if (isDescriptionOverflowing) {
            description.style.position = 'relative';
            description.setAttribute('data-overflow', 'true');
          } else {
            description.removeAttribute('data-overflow');
          }
        }
      });
    }

    // 페이지 로드 후 실행
    document.addEventListener('DOMContentLoaded', function() {
      // 초기 체크
      setTimeout(checkTextOverflow, 100);
    });

    // 윈도우 리사이즈 시 재체크
    window.addEventListener('resize', function() {
      setTimeout(checkTextOverflow, 100);
    });

    // 찜하기 상태 초기화 (프로그램 페이지용 직접 실행)
    console.log('📚 프로그램 페이지 - 찜하기 상태 초기화 시작 (직접 실행)');
    
    // 즉시 실행 함수
    (async function initProgramsPageWishlist() {
      try {
        console.log('📚 프로그램 페이지 - 찜하기 버튼 검색 시작');
        
        // 버튼이 로드될 때까지 기다림
        let attempts = 0;
        const maxAttempts = 10;
        
        const waitForButtons = async () => {
          attempts++;
          const wishlistBtns = document.querySelectorAll('.wishlist-btn');
          console.log(`📚 시도 ${attempts}/${maxAttempts} - 찜하기 버튼 개수:`, wishlistBtns.length);
          
          if (wishlistBtns.length > 0) {
            console.log('📚 찜하기 버튼 발견! 상태 확인 시작');
            
            // 로그인 상태 확인
            const response = await fetch('/api/auth/status');
            const authData = await response.json();
            console.log('📚 로그인 상태:', authData.isAuthenticated);
            
            if (!authData.isAuthenticated) {
              console.log('📚 비로그인 상태 - 찜 상태 확인 건너뜀');
              return;
            }
            
            // 모든 찜 목록 가져오기
            const wishlistResponse = await fetch('/api/wishlist/all');
            const wishlistData = await wishlistResponse.json();
            console.log('📚 찜 목록 API 응답:', wishlistData);
            
            if (wishlistData.success) {
              const wishlistedPrograms = wishlistData.wishlistedPrograms || [];
              console.log('📚 찜한 프로그램 목록:', wishlistedPrograms);
              
              // 각 버튼 상태 업데이트
              wishlistBtns.forEach((btn, index) => {
                const programId = btn.dataset.programId;
                console.log(`📚 버튼 ${index + 1} - 프로그램 ID: ${programId}`);
                
                if (wishlistedPrograms.includes(programId)) {
                  const icon = btn.querySelector('i');
                  if (icon) {
                    icon.classList.remove('far');
                    icon.classList.add('fas');
                    icon.style.color = '#dc3545'; // 빨간색으로 변경
                    console.log(`❤️ 프로그램 ${programId} - 찜 상태로 변경됨 (빨간색)`);
                  }
                  // 버튼 테두리도 빨간색으로 변경
                  btn.style.borderColor = '#dc3545';
                  btn.style.color = '#dc3545';
                }
              });
              
              console.log('✅ 프로그램 페이지 찜하기 상태 초기화 완료');
            }
          } else if (attempts < maxAttempts) {
            console.log('📚 버튼 대기 중... 500ms 후 재시도');
            setTimeout(waitForButtons, 500);
          } else {
            console.log('📚 최대 시도 횟수 초과 - 찜하기 버튼을 찾을 수 없음');
          }
        };
        
        // 즉시 시작하고, 추가로 1초 후에도 시도
        waitForButtons();
        setTimeout(waitForButtons, 1000);
        
      } catch (error) {
        console.error('📚 프로그램 페이지 찜하기 초기화 오류:', error);
      }
    })();
  </script>
</body>
</html> 