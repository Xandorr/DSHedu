<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>비밀번호 재설정 | DSH에듀</title>
  <meta name="description" content="새로운 비밀번호를 설정하여 계정을 안전하게 보호하세요">
  
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <!-- Custom CSS -->
  <link rel="stylesheet" href="/css/style.css">
  
  <style>
    .password-strength {
      margin-top: 0.5rem;
    }
    
    .strength-bar {
      height: 4px;
      border-radius: 2px;
      background-color: #e9ecef;
      overflow: hidden;
    }
    
    .strength-fill {
      height: 100%;
      transition: all 0.3s ease;
      border-radius: 2px;
    }
    
    .strength-weak { background-color: #dc3545; width: 25%; }
    .strength-fair { background-color: #ffc107; width: 50%; }
    .strength-good { background-color: #198754; width: 75%; }
    .strength-strong { background-color: #28a745; width: 100%; }
  </style>
</head>
<body>
  <!-- Header -->
  <%- include('./partials/header') %>
  
  <!-- Main Content -->
  <main>
    <!-- Reset Password Section -->
    <section class="login-section position-relative py-5">
      <div class="login-bg position-absolute w-100 h-100">
        <div class="gradient-overlay"></div>
      </div>
      
      <div class="container position-relative">
        <div class="row justify-content-center align-items-center min-vh-100">
          <div class="col-lg-5 col-md-7">
            <div class="login-card bg-white rounded-5 shadow-lg p-5 mx-auto">
              <!-- Logo & Brand -->
              <div class="text-center mb-4">
                <div class="brand-logo mb-3">
                  <h2 class="fw-bold text-primary mb-0">DSH<span class="text-secondary">에듀</span></h2>
                </div>
                <h4 class="fw-semi-bold mb-2">비밀번호 재설정</h4>
                <p class="text-muted mb-0">새로운 비밀번호를 설정해주세요</p>
              </div>

              <!-- Reset Password Form -->
              <form id="resetPasswordForm" class="login-form needs-validation" novalidate>
                <input type="hidden" id="token" value="<%= token %>">
                
                <div class="form-floating mb-3">
                  <input type="password" class="form-control form-control-lg" id="password" name="password" placeholder="새 비밀번호" required minlength="6">
                  <label for="password"><i class="fas fa-lock me-2"></i>새 비밀번호</label>
                  <div class="invalid-feedback">비밀번호는 최소 6자 이상이어야 합니다.</div>
                  
                  <!-- Password Strength Indicator -->
                  <div class="password-strength">
                    <div class="strength-bar">
                      <div class="strength-fill" id="strengthFill"></div>
                    </div>
                    <small class="text-muted" id="strengthText">비밀번호 강도: </small>
                  </div>
                </div>

                <div class="form-floating mb-4">
                  <input type="password" class="form-control form-control-lg" id="confirmPassword" name="confirmPassword" placeholder="비밀번호 확인" required>
                  <label for="confirmPassword"><i class="fas fa-lock me-2"></i>비밀번호 확인</label>
                  <div class="invalid-feedback">비밀번호가 일치하지 않습니다.</div>
                </div>

                <div class="d-grid mb-4">
                  <button type="submit" class="btn btn-primary btn-lg fw-semi-bold py-3 rounded-pill">
                    <i class="fas fa-key me-2"></i>비밀번호 재설정
                  </button>
                </div>
              </form>

              <!-- Security Tips -->
              <div class="mt-4 p-3 bg-light rounded-3">
                <h6 class="fw-bold text-dark mb-2">
                  <i class="fas fa-shield-alt text-primary me-2"></i>보안 권장사항
                </h6>
                <ul class="text-muted small mb-0">
                  <li>최소 8자 이상의 비밀번호를 사용하세요</li>
                  <li>대소문자, 숫자, 특수문자를 조합하세요</li>
                  <li>개인정보와 관련된 비밀번호는 피하세요</li>
                  <li>정기적으로 비밀번호를 변경하세요</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

  <!-- Footer -->
  <%- include('./partials/footer') %>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>

    // 토스트 알림 함수
    function showToast(type, title, message) {
      // 토스트 컨테이너 생성
      let toastContainer = document.querySelector('.toast-container');
      if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
        toastContainer.style.zIndex = '9999';
        document.body.appendChild(toastContainer);
      }

      // 토스트 아이콘과 색상 설정
      const iconClass = type === 'success' ? 'fas fa-check-circle text-success' : 'fas fa-exclamation-triangle text-danger';

      // 토스트 HTML 생성
      const toastHtml = '<div class="toast align-items-center text-bg-light border-0" role="alert" aria-live="assertive" aria-atomic="true">' +
        '<div class="d-flex">' +
          '<div class="toast-body">' +
            '<div class="d-flex align-items-center">' +
              '<i class="' + iconClass + ' me-2 fs-5"></i>' +
              '<div>' +
                '<div class="fw-bold">' + title + '</div>' +
                '<div class="text-muted small">' + message + '</div>' +
              '</div>' +
            '</div>' +
          '</div>' +
          '<button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>' +
        '</div>' +
      '</div>';

      // 토스트 요소 생성 및 표시
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = toastHtml;
      const toastElement = tempDiv.firstElementChild;
      toastContainer.appendChild(toastElement);

      // Bootstrap 토스트 인스턴스 생성 및 표시
      const toast = new bootstrap.Toast(toastElement, {
        autohide: true,
        delay: 5000
      });
      toast.show();

      // 토스트가 숨겨진 후 DOM에서 제거
      toastElement.addEventListener('hidden.bs.toast', function() {
        toastElement.remove();
      });
    }

    // Password strength checker
    function checkPasswordStrength(password) {
      let score = 0;
      let text = '';
      let className = '';

      if (password.length >= 6) score += 1;
      if (password.length >= 8) score += 1;
      if (/[a-z]/.test(password) && /[A-Z]/.test(password)) score += 1;
      if (/\d/.test(password)) score += 1;
      if (/[^a-zA-Z\d]/.test(password)) score += 1;

      switch (score) {
        case 0:
        case 1:
          text = '약함';
          className = 'strength-weak';
          break;
        case 2:
          text = '보통';
          className = 'strength-fair';
          break;
        case 3:
        case 4:
          text = '좋음';
          className = 'strength-good';
          break;
        case 5:
          text = '강함';
          className = 'strength-strong';
          break;
      }

      return { text, className };
    }

    // Password strength indicator
    document.getElementById('password').addEventListener('input', function() {
      const password = this.value;
      const strengthFill = document.getElementById('strengthFill');
      const strengthText = document.getElementById('strengthText');
      
      if (password.length === 0) {
        strengthFill.className = 'strength-fill';
        strengthText.textContent = '비밀번호 강도: ';
        return;
      }

      const strength = checkPasswordStrength(password);
      strengthFill.className = 'strength-fill ' + strength.className;
      strengthText.textContent = '비밀번호 강도: ' + strength.text;
    });

    // Password confirmation validation
    document.getElementById('confirmPassword').addEventListener('input', function() {
      const password = document.getElementById('password').value;
      const confirmPassword = this.value;
      
      if (confirmPassword && password !== confirmPassword) {
        this.setCustomValidity('비밀번호가 일치하지 않습니다.');
      } else {
        this.setCustomValidity('');
      }
    });

    // Form submission
    document.getElementById('resetPasswordForm').addEventListener('submit', async function(e) {
      e.preventDefault();

      const password = document.getElementById('password').value;
      const confirmPassword = document.getElementById('confirmPassword').value;

      if (password !== confirmPassword) {
        showToast('error', '비밀번호 불일치', '비밀번호가 일치하지 않습니다.');
        return;
      }

      if (!this.checkValidity()) {
        e.stopPropagation();
        this.classList.add('was-validated');
        return;
      }

      const submitBtn = this.querySelector('button[type="submit"]');
      const originalText = submitBtn.innerHTML;
      
      // 로딩 상태
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>재설정 중...';

      const token = document.getElementById('token').value;
      const formData = {
        password: password
      };

      try {
        const response = await fetch('/reset-password/' + token, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData)
        });

        const result = await response.json();

        if (response.ok) {
          showToast('success', '재설정 완료!', result.message || '비밀번호가 성공적으로 변경되었습니다.');
          
          // 3초 후 로그인 페이지로 이동
          setTimeout(() => {
            window.location.href = '/login';
          }, 3000);
        } else {
          throw new Error(result.message || '재설정에 실패했습니다.');
        }
      } catch (error) {
        console.error('비밀번호 재설정 오류:', error);
        showToast('error', '재설정 실패', error.message);
      } finally {
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
      }
    });

    // Form validation
    (function() {
      'use strict';
      const forms = document.querySelectorAll('.needs-validation');
      Array.prototype.slice.call(forms).forEach(function(form) {
        form.addEventListener('submit', function(event) {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
          }
          form.classList.add('was-validated');
        }, false);
      });
    })();
  </script>
</body>
</html>
